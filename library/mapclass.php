<?php
/*###############################################################
		=== Google Maps Class © James Mickley 2014 ===
		
This file contains a generic class with everything needed for mapping
It uses Google Maps javascript API v3
https://developers.google.com/maps/documentation/javascript/basics


To use, set the class variables zoom, center, maptype, mapname, and size
Then give it a json file or an array of locations and call the show() function  
This prints out all the html and javascript needed to display the map

Multiple maps can be displayed on the same page.  
Just set firstmap to false for the subsequent maps

At a minimum the class expects one of the following
- a JSON file containing the locations variable and json set to TRUE
- an array of locations 


##### Public Function Reference #####
* show()		Shows the map generated by the data passed to the class instance


##### Version History #####
- 1/14/2014 JGM - Version 1.0:
		- Added support for json caching
		- Added support for MarkerClusterer
		- Infowindows now work in Streetview


###############################################################*/


Class Map {

// #################### Public Class Variables ###################
	
	// Default zoom level
	Public $zoom = 10;

	// Default center of the map
	Public $center = array(-34.397,150.644); 

	// Possible types are: ROADMAP, SATELLITE, HYBRID, & TERRAIN
	Public $maptype = "HYBRID";

	// Default Name of the initialize function and also the map div.
	Public $mapname = "gmap"; 

	// Default size of the map div. 
	// Can be in px or %
	Public $size = array("500 px","400 px");

	// This variable is used to keep track of whether this particular map object is the first on the page
	// Allows us to add the javascript sources only once
	Public $firstmap = TRUE; 

	// This variable sets whether or not to use a JSON file (for caching)
	// If this is false, locations must be passed to the class via the locations variable
	Public $json = FALSE;

	// The name of the file to use for JSON caching
	Public $jsonfile = "cache.json";

	// Whether to use MarkerClusterer
	Public $markercluster = FALSE;

	// Set this to point to where markerclusterer should be found
	Public $clusterer_src = "library/markerclusterer_compiled.js";

	// Set to an image for custom marker images
	Public $marker = "";

	// Array for storing the points, circles, grid cells etc. to display
	Public $locations;

	// Stores all the html generated 
	Public $html;


// #################### Private Class Variables ###################

	
	// Holds the initialization function code
	Private $initfunc;

	// Holds code for MarkerClusterer when enabled
	Private $cluster = array();

	// Just a header that will show up in the javascript code
	Private $header = "// ##### Generated by Map Class © James Mickley 2014 ##### //";


// #################### Map Generation Functions ###################
	

	// This function makes the javascript initialization function for this particular map object
	Private function make_initfunc(){
		
		// Store the center array as a local function variable
		$center = $this->center;

		// Store the cluster array as a local function variable
		$cluster = $this->cluster;

		// If json is disabled, construct an add an array of locations to display
		// The array must be passed via the locations class variable
		if(!$this->json){

			// Convert the array of location arrays to a string to include in the javascript function
			for($i = 0; $i < count($this->locations); $i++){
				$loc = $this->locations[$i];

				// Figure out whether to add a comma at the end of a location
				if($i < (count($this->locations) - 1)){
					$comma = ",";
				}else{$comma = "";}

				// Construct a location array
				$loc_list .= "['$loc[0]', $loc[1], $loc[2], '$loc[3]', '$loc[4]', $loc[5], $i]".$comma."\n\t\t\t\t";
			}

			// Add the javascript code
			$locations = "// Array of location information to display
			var locations = [
				$loc_list
			];";
		}
		
		
		// Construct the initialization function
		$this->initfunc = "
		// This function displays the map: $this->mapname
		function $this->mapname() {
		
			// Map center for $this->mapname
			var mapcenter = new google.maps.LatLng($center[0], $center[1]);
			
			// Map options for $this->mapname
			var myOptions = {
				zoom: $this->zoom,
				center: mapcenter,
				mapTypeControl: true,
				mapTypeControlOptions: {
					style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
					},
				mapTypeId: google.maps.MapTypeId.$this->maptype
			};
			
			// Display the map $this->mapname in that particular <div> element.
			var map = new google.maps.Map(document.getElementById(\"$this->mapname\"), myOptions);
			
			$locations

			$cluster[1]
			
			// Display each of the locations, using different functions for grid cells and point locations
			for (var i = 0; i < locations.length; i++) {

				// Store the current location in the loc array
				var loc = locations[i];

				// Decide which type of data it is and how to display it
				if (loc[4] == 'grid'){

					SetGridCell(map,Info_$this->mapname,loc); // Grid Cell with a given centroid

				}else if(loc[4] == 'circle'){

					SetCircle(map,Info_$this->mapname,loc); // Circle with a given radius/center

				}else{

					var Marker = SetPoint(map,Info_$this->mapname,loc); // Point location

					$cluster[2]

				}
			}

			$cluster[3]

		}
		
		// Global object which stores a pointer to this map's previous info window in the ref property.
		var Info_$this->mapname = {ref: new google.maps.InfoWindow()};
		
		// Run the initialize function for: $this->mapname
		$this->mapname();";
	}
	
	
	// This function makes the html code to display a map
	public function get_html(){

		// Add MarkerClusterer to the map if specified
		if($this->markerclusterer){

			// Make the code for MarkerClusterer
			$cluster[0] = "<script src=\"$this->clusterer_src\"></script>";

			$cluster[1] = "// Make an array to hold all the Markers
			var markers = [];";

			$cluster[2] = "// Add the current Marker to the marker array
					markers.push(Marker);";

			$cluster[3] = "// Enable Markerclusterer
	        var mcOptions = {gridSize: 40, maxZoom: 18};
        	var markerCluster = new MarkerClusterer(map, markers, mcOptions);";

        	// Save to class variable
        	$this->cluster = $cluster;
		}

		// Add a link to a json cache file if json is enabled
		if($this->json){

			$json = "<script type=\"text/javascript\" src=\"$this->jsonfile\"></script>";
		}

		// Add a custom marker image if enabled
		if($this->marker != ""){
			$marker[0] = "var image = '".$this->marker."';";
			$marker[1] = "icon: image,";
		}
		
		// Construct the initialization function for this map instance
		$this->make_initfunc();
		
		// Store the size array as a local function variable
		$size = $this->size;

		// Make sure the copyright symbol is correct in the header
		$this->header = str_replace("©", chr(169), $this->header);

		// Add the api link and general functions if this is the first map on the page.
		// $this->firstmap must be FALSE if it's not the first map.
		if($this->firstmap){
			$header = "
		<script type=\"text/javascript\" src=\"http://maps.google.com/maps/api/js?sensor=false\"></script>
		$cluster[0]
		$json
		<script type=\"text/javascript\">
		
			$this->header

			///// General Map Functions /////
			
			// Display a point location and make an info window listener
			function SetPoint(map,OldInfo,loc){

				// The point to display
				var Point = new google.maps.LatLng(loc[1], loc[2]);
				
				// The info window for this location
				var Info = new google.maps.InfoWindow({
					content: loc[3],
					maxWidth: 600
					});
				
				// Set a custom marker image
				$marker[0]

				// Construct the marker
				var Marker = new google.maps.Marker({
					position: Point,
					map: map,
					title: loc[0],
					$marker[1]
					zIndex: loc[6],
					infoWindow: Info
				});
				
				// Add a click event listener to display the info window
				google.maps.event.addListener(Marker, 'click', function() {

					// Close previous info window and make this the previous
					OldInfo.ref.close();
					OldInfo.ref = this.infoWindow;

					// Checks if Street View is active
					var street = map.getStreetView().getVisible();

					// Alternate coding for infoWindows in Street View
					if(street){

						// Get the Street View object
						var streetview = map.getStreetView();

						// Open the infoWindow in Street View instead of on the map
						this.infoWindow.open(streetview, Marker);

					}else{

						// Open this info window on the map
						this.infoWindow.open(map, Marker);	

					}
					

				});
				
				return Marker;
			}

			// Display a grid cell location and make an info window listener
			function SetGridCell(map,OldInfo,loc){
				
				// The centroid of the grid cell to display
				var Point = new google.maps.LatLng(loc[1], loc[2]);
				
				// Figure out grid cell coordinates from the centroid and the grid cell size
				var GridCellCoords = [
					new google.maps.LatLng(loc[1] + (loc[5]/2), loc[2] - (loc[5]/2)), // Top Left
					new google.maps.LatLng(loc[1] + (loc[5]/2), loc[2] + (loc[5]/2)), // Top Right
					new google.maps.LatLng(loc[1] - (loc[5]/2), loc[2] + (loc[5]/2)), // Bottom Right
					new google.maps.LatLng(loc[1] - (loc[5]/2), loc[2] - (loc[5]/2)) // Bottom Left
				];
				
				// The info window for this location
				var Info = new google.maps.InfoWindow({
					content: loc[3],
					position: Point,
					maxWidth: 600
				});
				
				// Construct the grid cell
				GridCell = new google.maps.Polygon({
					paths: GridCellCoords,
					strokeColor: \"#00FF00\",
					strokeOpacity: 0.8,
					strokeWeight: 1,
					fillColor: \"#00FF00\",
					fillOpacity: 0.35,
					title: loc[0],
					infoWindow: Info
				});
				
				// Display the grid cell
				GridCell.setMap(map);
				
				// Add a click event listener to display the info window
				google.maps.event.addListener(GridCell, 'click', function() {


					// Close previous info window and make this the previous
					OldInfo.ref.close();
					OldInfo.ref = this.infoWindow;

					// Checks if Street View is active
					var street = map.getStreetView().getVisible();

					// Alternate coding for infoWindows in Street View
					if(street){

						// Get the Street View object
						var streetview = map.getStreetView();

						// Open the infoWindow in Street View instead of on the map
						this.infoWindow.open(streetview);

					}else{

						// Open this info window on the map
						this.infoWindow.open(map);	

					}

				});
			}
            
			// Display a circle location and make an info window listener
			function SetCircle(map,OldInfo,loc){

				// The center of the circle to display
				var Center = new google.maps.LatLng(loc[1], loc[2]);

				// The radius of the circle to display
				var Radius = loc[5];

				// The info window for this location
				var Info = new google.maps.InfoWindow({
					content: loc[3],
					position: Center,
					maxWidth: 600
				});

				// Construct the circle
				Circle = new google.maps.Circle({
					center: Center,
					radius: Radius,
					strokeColor: \"#00FF00\",
					strokeOpacity: 0.8,
					strokeWeight: 1,
					fillColor: \"#00FF00\",
					fillOpacity: 0.35,
					title: loc[0],
					infoWindow: Info
				});

				// Display the circle
				Circle.setMap(map);

				// Add a click event listener to display the info window
				google.maps.event.addListener(Circle, 'click', function() {

					// Close previous info window and make this the previous
					OldInfo.ref.close();
					OldInfo.ref = this.infoWindow;

					// Checks if Street View is active
					var street = map.getStreetView().getVisible();

					// Alternate coding for infoWindows in Street View
					if(street){

						// Get the Street View object
						var streetview = map.getStreetView();

						// Open the infoWindow in Street View instead of on the map
						this.infoWindow.open(streetview);

					}else{

						// Open this info window on the map
						this.infoWindow.open(map);	

					}

				});
			}
		</script>";
		}else{$header = "";}
		
		// Make the html to display
		$this->html = "
		<div id=\"$this->mapname\" style=\"width:$size[0]; height:$size[1]\"></div>$header
		<script type=\"text/javascript\">
		$this->initfunc
		</script>
		";
		
		// Return our constructed html
		return $this->html;
		
	}
	
	
	// Show the map by echoing our generated html.
	public function show(){
		
		// run get_html() and echo it
		echo $this->get_html();
		
	}
}